[[{"i":"aspnet-core-reimagined-with-htmx-book","l":"ASP.NET Core Reimagined with htmx Book","p":["Have questions or feedback about the book? My email is cwoodruff@live.com.","For the source code for the book, visit the book's GitHub repo -- htmx-razor-workshop","To find translations, please check out the Translations page."]}],[{"l":"Dedication"}],[{"l":"Epigraph"}],[{"l":"Acknowledgments","p":["This is a basic page, with only a title and some text content."]}],[{"l":"Forward","p":["This is a basic page, with only a title and some text content."]}],[{"l":"Preface","p":["This is a basic page, with only a title and some text content."]}],[{"l":"Translations","p":["Language","Author","Notes","URL","Chinese","Spanish","French","Japanese","Swedish"]}],[{"l":"1"},{"i":"why-htmx-with-aspnet-core-9-razor-pages","l":"Why htmx with ASP.NET Core 9 Razor Pages?","p":["Web development has evolved significantly over the past decade, shifting from server-rendered applications to JavaScript-heavy frontends that rely on client-side frameworks like React, Angular, and Vue. However, these solutions often introduce excessive complexity, forcing developers to juggle state management, bundlers, and frontend dependencies.","With the rise of htmx, many developers are rediscovering the power of server-side rendering while maintaining dynamic interactivity. htmx enhances HTML, allowing it to handle interactions that traditionally require JavaScript, offering a more straightforward way to create fast, interactive, and maintainable web applications. Unlike frontend-heavy frameworks, which offload rendering and logic to the client, htmx enables a seamless experience by keeping the logic on the server and sending only the necessary updates to the client. This means developers can build highly interactive applications without the overhead of managing complex client-side code.","If you're an ASP.NET Core developer working with Razor Pages, htmx presents an efficient alternative to client-side frameworks. It enables dynamic updates with minimal JavaScript, and integrating it into your ASP.NET Core 9 Razor Pages applications is a straightforward process. This book will guide you through from basic concepts to advanced interactivity, ensuring that by the end, you'll be comfortable building fully interactive, server-driven applications that remain performant and scalable without relying on a heavy frontend framework."]},{"l":"The Power of Simplicity in Web Development","p":["One of the biggest challenges modern developers face is managing complexity. Single-page applications (SPAs) have gained popularity due to their ability to provide smooth, interactive user experiences. However, these applications often come at a cost—higher development complexity, performance bottlenecks, and increased maintenance burdens. The need for APIs, state management, and extensive client-side JavaScript can make projects challenging to scale and debug.","htmx challenges this paradigm by offering a return to simplicity. Instead of shifting rendering responsibilities to the client, htmx keeps rendering on the server and uses lightweight AJAX requests to update specific parts of the page. This approach reduces unnecessary JavaScript, improves performance, and makes applications easier to develop and maintain."]},{"i":"what-is-htmx","l":"What is htmx?","p":["htmx is a lightweight JavaScript library that extends HTML's capabilities, allowing it to make HTTP requests and dynamically update the page without requiring JavaScript. Instead of writing JavaScript to handle AJAX interactions, developers can use htmx’s HTML attributes to perform tasks like sending HTTP requests, updating the DOM, and handling events.","For example, consider a simple interaction where a user clicks a button to load a message dynamically:","In this example, clicking the button sends an HTTP GET request to the /hello endpoint. The response from the server replaces the content inside the div id=message element, all without needing any JavaScript.","This declarative approach makes it incredibly easy to build dynamic applications while keeping HTML and server logic cleanly separated."]},{"i":"why-use-htmx-with-razor-pages","l":"Why Use htmx with Razor Pages?","p":["Razor Pages already provides a structured, server-rendered development model, but traditional implementations often require full-page reloads or custom JavaScript for interactivity. By integrating htmx, developers can enhance their applications while reducing complexity, leading to a more efficient and effective development process.","A few key advantages of htmx include:","Eliminates JavaScript complexity– No need for frontend frameworks or extensive JavaScript.","Enhances performance– Updates only necessary parts of the page instead of reloading everything.","Simplifies backend logic– Keeps interactions on the server, making debugging easier.","Leverages server-side security– Keeps application state and logic on the backend rather than the client."]},{"l":"Real-World Use Cases","p":["htmx is particularly useful in scenarios where minimal JavaScript is preferred and seamless interactions are essential."]},{"l":"Form Submissions","p":["Forms are a fundamental part of most web applications, and htmx makes handling them straightforward. Instead of requiring JavaScript to process form submissions, htmx can handle the interaction declaratively:","On the server, the Razor Page handler processes the request and returns the response:","The result is dynamically updated without reloading the entire page, leading to a more seamless user experience."]},{"l":"Dynamic Content Loading","p":["Another common use case for htmx is dynamically loading content without a full-page refresh. For instance, a user might want to open a modal form without navigating to another page. Instead of using JavaScript to load content dynamically, htmx can handle it:","When the button is clicked, htmx fetches the modal content from the server and injects it into the designated container. This makes building interactive interfaces much simpler than manually manipulating the DOM with JavaScript."]},{"l":"Performance and Scalability Benefits","p":["By reducing unnecessary JavaScript execution, htmx significantly improves performance. Since interactions are managed on the server, applications benefit from:","Faster initial load times since there’s no need for heavy JavaScript frameworks.","Improved SEO since content is server-rendered and immediately available to search engines.","More maintainable code by keeping logic in Razor Pages rather than splitting it between frontend and backend.","Moreover, htmx can alleviate the burden of complex state synchronization between frontend and backend, reducing API load by only requesting and updating what’s necessary, rather than fetching full-page responses."]},{"l":"Conclusion","p":["htmx represents a shift back to the simplicity of server-rendered applications while maintaining interactivity. When combined with ASP.NET Core 9 Razor Pages, it provides an elegant way to build applications that are efficient, scalable, and easy to maintain. This book will explore how htmx can enhance your development workflow while keeping your applications lightweight and fast.","As we move forward, we will dive deeper into setting up a robust development environment and learn how to integrate htmx seamlessly into your projects."]}],[{"l":"2"},{"l":"Setting Up Your Development Environment","p":["chapter02-setting-up-dev-env.png","The goal is to help you build a solid development environment for htmx in ASP.NET Core 9. This will ensure a smooth workflow and allow you to focus on building interactive web applications without unnecessary distractions. In this chapter, we will guide you through the process of installing .NET 9, setting up an ASP.NET Core Razor Pages project, adding htmx to the project, and configuring tools for an efficient development workflow."]},{"i":"installing-aspnet-core-9-and-required-tools","l":"Installing ASP.NET Core 9 and Required Tools","p":["The first step in setting up your environment is installing .NET 9. Microsoft provides an official .NET SDK that includes everything needed to build and run ASP.NET Core applications. You can download the latest SDK from the secure and official .NET website. Once installed, open a terminal or command prompt and verify the installation by running:","If the command returns a version number starting with 9., your installation was successful. Next, let’s create a new Razor Pages project to use with htmx. Run the following commands:","This command initializes a basic Razor Pages project and starts a development server at https://localhost:5001/. Now, we are ready to integrate htmx."]},{"i":"adding-htmx-to-an-aspnet-core-9-razor-pages-project","l":"Adding htmx to an ASP.NET Core 9 Razor Pages Project","p":["To use htmx, you must include its JavaScript file in your project. The easiest way to do this is by linking to the htmx CDN inside your _Layout.cshtml file. Open Pages/Shared/_Layout.cshtml and add the following inside the head tag:","Alternatively, if you prefer to host the file locally, download htmx.min.js from the official htmx GitHub repo and place it inside the wwwroot/js/ folder. Then, update _ Layout.cshtml to reference it locally:","To confirm that htmx is working correctly, create a simple button that triggers an AJAX request when clicked. Add the following to Pages/Index.cshtml:","Now, modify Pages/Index.cshtml.cs to handle the request and return a response:","Run your application and click the button. If \"Hello, htmx!\" appears in the #message div without a full page reload, congratulations! htmx is successfully integrated into your Razor Pages project."]},{"l":"Configuring a Robust Development Workflow","p":["A well-structured project is easier to maintain and allows for smooth development. Organizing Razor Pages into logical folders keeps things clean. Your project structure should look something like this:","Hot-reload is a valuable feature in ASP.NET Core that automatically applies changes without restarting the server. This is particularly useful when working with Razor Pages. To enable hot-reload, start your application using:","This command monitors file changes and refreshes the application automatically. Additionally, debugging htmx requests is straightforward using browser developer tools. Open your browser's developer console and inspect network requests to see how htmx interacts with your server.","When working with htmx, the HX-Request header helps differentiate between standard and htmx-triggered requests. You can check this in your backend code to return different responses depending on whether the request originated from htmx:","Version control is crucial for any project. To initialize a Git repository, navigate to your project directory and run:","For Razor Pages projects, a typical .gitignore file should exclude compiled binaries and user-specific files. Here's an example:"]},{"l":"Conclusion","p":["With your development environment set up to perfection, you are now fully prepared to embark on the journey of building interactive web applications with htmx and ASP.NET Core 9 Razor Pages. Having .NET installed, a Razor Pages project initialized, and htmx integrated, you are now ready to explore the world of dynamic, interactive applications. In the next chapter, we will delve into the core features of htmx and how to utilize them to create dynamic content updates in Razor Pages"]}],[{"l":"3"},{"l":"First Steps with htmx","p":["You can find the source examples for this chapter here.","The way we build web applications is evolving. While client-side JavaScript frameworks dominate modern development, they often introduce unnecessary complexity—forcing developers to juggle state management, bundlers, and intricate frontend tooling. htmx, on the other hand, plays a crucial role in simplifying this process, enhancing HTML’s native capabilities and allowing developers to craft highly interactive experiences with minimal JavaScript. This chapter will guide you through integrating htmx with ASP.NET Core Razor Pages to build seamless, dynamic web applications without the burden of complex JavaScript frameworks.","By focusing on server-driven interactions, htmx makes it possible to create fluid user experiences without requiring a full-fledged JavaScript framework. It leverages the power of declarative attributes to handle AJAX requests, event-driven interactions, and form submissions—all while keeping your markup clean and understandable. When combined with Razor Pages, htmx offers a robust way to blend server-side rendering with just the right amount of interactivity, making your applications efficient, easy to maintain, and giving you control over your projects. This efficiency and maintainability are key benefits of using htmx.","This chapter is designed to take you from the fundamental principles of htmx to implementing fully functional Razor Pages. You will learn to dynamically fetch, update, and submit content without needing a full page reload. We’ll cover everything from using hx-get and hx-post for data retrieval and submission to debugging common issues and fine-tuning request behaviors. By the end, you will be well-prepared to build interactive web applications that are both modern and maintainable."]},{"l":"Understanding the Basics of htmx in Razor Pages","p":["At its core, htmx allows you to send AJAX requests using simple HTML attributes. The two most fundamental ones are:","hx-get: Makes an HTTP GET request to fetch content from the server.","hx-post: Sends a POST request to submit data to the server.","Example:","When the button is clicked, an asynchronous GET request is made to /hello, and the response updates the #message div."]},{"l":"The Request-Response Cycle with htmx in Razor Pages","p":["Under the hood, htmx works just like a normal browser request but without a full-page reload. Here’s how a typical request-response cycle looks:","User interacts with an element (e.g., clicks a button).","htmx sends an AJAX request to the specified endpoint.","The Razor Page processes the request and returns partial HTML.","htmx updates the target element with the returned HTML.","This means you can build dynamic experiences while keeping your app’s logic centralized in your Razor Page Model (.cshtml.cs)."]},{"l":"Examining How Partial Updates Work in the Browser","p":["Unlike traditional AJAX, where you manually manipulate the DOM, htmx automatically swaps the response into a specified target. This is controlled using hx-target and hx-swap:","hx-target determines which element will be updated.","hx-swap decides how the response is inserted ( innerHTML, outerHTML, beforebegin, etc.).","By returning only the relevant snippet from the server, you make updates feel instant and efficient."]},{"l":"Creating Your First Interactive Razor Page with htmx","p":["Let’s create a simple Razor Page that dynamically loads a message when a button is clicked.","Pages/Index.cshtml","Pages/Index.cshtml.cs"]},{"l":"Using hx-get to Dynamically Load Content from Another Page","p":["In the above example, clicking the button triggers an hx-get request to OnGetMessage(), which returns a snippet of HTML. htmx then injects this snippet into the #message div."]},{"l":"Understanding hx-trigger for Event-Driven Interactions","p":["By default, htmx triggers requests on clicks, but you can customize it with hx-trigger:","Here, every keystroke (after a 500ms delay) triggers a request to update the results dynamically."]},{"l":"Implementing a Button Click That Fetches and Displays Content","p":["Let’s modify our earlier example to display different content each time the button is clicked.","Updated Index.cshtml.cs","Now, each click returns a different message from the list."]},{"l":"Handling Form Submissions with htmx"},{"l":"Using hx-post to Submit Forms Without Reloading the Page","p":["htmx makes form submissions seamless by eliminating full-page reloads."]},{"l":"Processing Form Data in the Razor Page Model","p":["Index.cshtml.cs","When the form is submitted, htmx sends the data, and the response dynamically updates #result."]},{"l":"Displaying Server Responses Dynamically with hx-target and hx-swap","p":["By default, hx-target updates a specific element, and hx-swap determines how the response is inserted. You can change the behavior like so:","This appends new responses instead of replacing them."]},{"l":"Introducing hx-validate for Basic Client-Side Validation","p":["htmx supports built-in validation with hx-validate:"]},{"l":"Debugging and Observing htmx Requests"},{"l":"Inspecting htmx Network Requests Using Browser Dev Tools","p":["You can inspect AJAX requests in the browser’s dev tools under the Network tab."]},{"l":"Common Errors and How to Debug Them","p":["Incorrect Content-Type: Ensure responses return text/html.","Server Errors: Check the console for 500 errors."]},{"i":"using-the-htmxconfigrequest-event-for-debugging","l":"Using the htmx:configRequest Event for Debugging"},{"i":"preview-of-next-chapter-understanding-htmx-commands","l":"Preview of Next Chapter: Understanding htmx Commands","p":["In the next chapter, we’ll dive deeper into htmx commands and interactions, including hx-push-url, hx-replace-url, and Hyperscript."]}],[{"l":"Updates and Corrections","p":["I want to thank every reader who took the time to share their feedback and corrections on my book. Your insights and meticulous attention to detail have helped enhance the work's quality and enriched the reading experience for others. It's through your engagement and thoughtful contributions that the book has evolved and improved. Thank you for your invaluable support and for being an integral part of this journey. Your feedback is genuinely appreciated.","Date","Chapter","Section","Acknowledgement","Notes"]}],[{"l":"Author Bio","p":["Chris Woodruff Presenting","Chris Woodruff, also known as Woody, is an Architect at Real Times Technologies and brings nearly three decades of industry expertise, having launched his career before the first .COM boom. Renowned for his contributions to software development and architecture, Woody is a regular speaker at international conferences, where he shares his deep knowledge on topics ranging from database development to APIs and web technologies.","A dedicated mentor, Woody thrives on guiding fellow developers and enhancing their skills through his talks, written work, and digital content. He co-hosts the popular “Breakpoint Show” podcast and YouTube channel, which he uses to connect with and educate the tech community. He is also writing a book covering network programming with C# and .NET.","Woody’s interests extend beyond his professional life, adding a personal touch to his character. He is a passionate bourbon enthusiast, often embarking on adventures along the Bourbon Trail in search of unique finds to savor and share with friends. Family time is a cherished part of his life, and he often shares insights from his professional journey on his blog at https://woodruff.dev. To stay updated on his latest projects and adventures, follow him on BlueSky at https://bsky.app/profile/woodruff.dev or Mastodon at https://mastodon.social/@cwoodruff, where he shares his thoughts and experiences, fostering a sense of connection with his audience."]},{"l":"Contact Info","p":["Email - chris@woodruff.dev","WhatsApp - https://wa.me/16167246885","GitHub - https://github.com/cwoodruff"]}]]